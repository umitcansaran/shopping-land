{"ast":null,"code":"import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\nconst onlineEvents = ['online', 'offline'];\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n        onlineEvents.forEach(event => {\n          window.addEventListener(event, listener, false);\n        });\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach(event => {\n            window.removeEventListener(event, listener);\n          });\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n  setEventListener(setup) {\n    var _this$cleanup2;\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n  setOnline(online) {\n    const changed = this.online !== online;\n    if (changed) {\n      this.online = online;\n      this.onOnline();\n    }\n  }\n  onOnline() {\n    this.listeners.forEach(_ref => {\n      let {\n        listener\n      } = _ref;\n      listener();\n    });\n  }\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n    return navigator.onLine;\n  }\n}\nconst onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };","map":{"version":3,"mappings":";;AAOA,MAAMA,YAAY,GAAG,CAAC,QAAD,EAAW,SAAX,CAArB;AAEO,MAAMC,aAAN,SAA4BC,YAA5B,CAAyC;EAM9CC,WAAW,GAAG;IACZ;IACA,IAAKC,MAAL,GAAcC,QAAD,IAAc;MACzB;MACA;MACA,IAAI,CAACC,QAAD,IAAaC,MAAM,CAACC,gBAAxB,EAA0C;QACxC,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,EAA/B,CADwC;;QAGxCL,YAAY,CAACU,OAAb,CAAsBC,KAAD,IAAW;UAC9BJ,MAAM,CAACC,gBAAP,CAAwBG,KAAxB,EAA+BF,QAA/B,EAAyC,KAAzC;SADF;QAIA,OAAO,MAAM;UACX;UACAT,YAAY,CAACU,OAAb,CAAsBC,KAAD,IAAW;YAC9BJ,MAAM,CAACK,mBAAP,CAA2BD,KAA3B,EAAkCF,QAAlC;WADF;SAFF;MAMD;MAED;KAlBF;EAoBD;EAESI,WAAW,GAAS;IAC5B,IAAI,CAAC,IAAKC,QAAV,EAAmB;MACjB,IAAKC,iBAAL,CAAsB,KAAKX,KAA3B;IACD;EACF;EAESY,aAAa,GAAG;IACxB,IAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;MAAA;MACxB,sBAAKH,OAAL;MACA,IAAKA,QAAL,GAAeI,SAAf;IACD;EACF;EAEDH,gBAAgB,CAACX,KAAD,EAAuB;IAAA;IACrC,IAAKA,MAAL,GAAaA,KAAb;IACA,uBAAKU,OAAL;IACA,KAAKA,OAAL,GAAeV,KAAK,CAAEe,MAAD,IAAsB;MACzC,IAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;QAC/B,IAAKC,UAAL,CAAeD,MAAf;MACD,CAFD,MAEO;QACL,KAAKd,QAAL;MACD;IACF,CANmB,CAApB;EAOD;EAEDe,SAAS,CAACD,MAAD,EAAyB;IAChC,MAAME,OAAO,GAAG,IAAKF,OAAL,KAAgBA,MAAhC;IAEA,IAAIE,OAAJ,EAAa;MACX,IAAKF,OAAL,GAAcA,MAAd;MACA,KAAKd,QAAL;IACD;EACF;EAEDA,QAAQ,GAAS;IACf,KAAKiB,SAAL,CAAeZ,OAAf,CAAuB,QAAkB;MAAA,IAAjB;QAAED;MAAF,CAAD;MACrBA,QAAQ;KADV;EAGD;EAEDc,QAAQ,GAAY;IAClB,IAAI,OAAO,KAAKJ,MAAZ,KAAuB,SAA3B,EAAsC;MACpC,OAAO,KAAKA,MAAZ;IACD;IAED,IACE,OAAOK,SAAP,KAAqB,WAArB,IACA,OAAOA,SAAS,CAACC,MAAjB,KAA4B,WAF9B,EAGE;MACA,OAAO,IAAP;IACD;IAED,OAAOD,SAAS,CAACC,MAAjB;EACD;AAnF6C;AAsFnCC,mBAAa,GAAG,IAAIzB,aAAJ","names":["onlineEvents","OnlineManager","Subscribable","constructor","setup","onOnline","isServer","window","addEventListener","listener","forEach","event","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","undefined","online","setOnline","changed","listeners","isOnline","navigator","onLine","onlineManager"],"sources":["/Users/umit/Desktop/shopping-land express-react/shopping-land/frontend/node_modules/@tanstack/query-core/src/onlineManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nconst onlineEvents = ['online', 'offline'] as const\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        onlineEvents.forEach((event) => {\n          window.addEventListener(event, listener, false)\n        })\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach((event) => {\n            window.removeEventListener(event, listener)\n          })\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    const changed = this.online !== online\n\n    if (changed) {\n      this.online = online\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}