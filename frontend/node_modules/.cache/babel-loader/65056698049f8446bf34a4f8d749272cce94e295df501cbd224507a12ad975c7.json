{"ast":null,"code":"import * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport const MountedMapsContext = React.createContext(null);\nexport const MapProvider = props => {\n  const [maps, setMaps] = useState({});\n  const onMapMount = useCallback(function (map) {\n    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n      return {\n        ...currMaps,\n        [id]: map\n      };\n    });\n  }, []);\n  const onMapUnmount = useCallback(function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = {\n          ...currMaps\n        };\n        delete nextMaps[id];\n        return nextMaps;\n      }\n      return currMaps;\n    });\n  }, []);\n  return React.createElement(MountedMapsContext.Provider, {\n    value: {\n      maps,\n      onMapMount,\n      onMapUnmount\n    }\n  }, props.children);\n};\nexport function useMap() {\n  var _a;\n  const maps = (_a = useContext(MountedMapsContext)) === null || _a === void 0 ? void 0 : _a.maps;\n  const currentMap = useContext(MapContext);\n  const mapsWithCurrent = useMemo(() => {\n    return {\n      ...maps,\n      current: currentMap === null || currentMap === void 0 ? void 0 : currentMap.map\n    };\n  }, [maps, currentMap]);\n  return mapsWithCurrent;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,EAAEC,UAAU,QAAO,OAAO;AAGhE,SAAQC,UAAU,QAAO,OAAO;AAQhC,OAAO,MAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAa,CAA0B,IAAI,CAAC;AAEpF,OAAO,MAAMC,WAAW,GAA2CC,KAAK,IAAG;EACzE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAyB,EAAE,CAAC;EAE5D,MAAMW,UAAU,GAAGV,WAAW,CAAC,UAACW,GAAW,EAA4B;IAAA,IAA1BC,yEAAa,SAAS;IACjEH,OAAO,CAACI,QAAQ,IAAG;MACjB,IAAID,EAAE,KAAK,SAAS,EAAE;QACpB,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;;MAEvD,IAAID,QAAQ,CAACD,EAAE,CAAC,EAAE;QAChB,MAAM,IAAIE,KAAK,CAAC,mCAAmCF,EAAE,EAAE,CAAC;;MAE1D,OAAO;QAAC,GAAGC,QAAQ;QAAE,CAACD,EAAE,GAAGD;MAAG,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,YAAY,GAAGf,WAAW,CAAC,YAA2B;IAAA,IAA1BY,yEAAa,SAAS;IACtDH,OAAO,CAACI,QAAQ,IAAG;MACjB,IAAIA,QAAQ,CAACD,EAAE,CAAC,EAAE;QAChB,MAAMI,QAAQ,GAAG;UAAC,GAAGH;QAAQ,CAAC;QAC9B,OAAOG,QAAQ,CAACJ,EAAE,CAAC;QACnB,OAAOI,QAAQ;;MAEjB,OAAOH,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OACEf,oBAACM,kBAAkB,CAACa,QAAQ;IAC1BC,KAAK,EAAE;MACLV,IAAI;MACJE,UAAU;MACVK;;EACD,GAEAR,KAAK,CAACY,QAAQ,CACa;AAElC,CAAC;AAED,OAAM,SAAUC,MAAM;;EACpB,MAAMZ,IAAI,GAAG,gBAAU,CAACJ,kBAAkB,CAAC,0CAAEI,IAAI;EACjD,MAAMa,UAAU,GAAGnB,UAAU,CAACC,UAAU,CAAC;EAEzC,MAAMmB,eAAe,GAAGrB,OAAO,CAAC,MAAK;IACnC,OAAO;MAAC,GAAGO,IAAI;MAAEe,OAAO,EAAEF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEV;IAAG,CAAC;EAC5C,CAAC,EAAE,CAACH,IAAI,EAAEa,UAAU,CAAC,CAAC;EAEtB,OAAOC,eAAe;AACxB","names":["React","useState","useCallback","useMemo","useContext","MapContext","MountedMapsContext","createContext","MapProvider","props","maps","setMaps","onMapMount","map","id","currMaps","Error","onMapUnmount","nextMaps","Provider","value","children","useMap","currentMap","mapsWithCurrent","current"],"sources":["/Users/umit/Desktop/shopping-land express-react/shopping-land/frontend/node_modules/react-map-gl/src/components/use-map.tsx"],"sourcesContent":["import * as React from 'react';\nimport {useState, useCallback, useMemo, useContext} from 'react';\n\nimport {MapRef} from '../mapbox/create-ref';\nimport {MapContext} from './map';\n\ntype MountedMapsContextValue = {\n  maps: {[id: string]: MapRef};\n  onMapMount: (map: MapRef, id: string) => void;\n  onMapUnmount: (id: string) => void;\n};\n\nexport const MountedMapsContext = React.createContext<MountedMapsContextValue>(null);\n\nexport const MapProvider: React.FC<{children?: React.ReactNode}> = props => {\n  const [maps, setMaps] = useState<{[id: string]: MapRef}>({});\n\n  const onMapMount = useCallback((map: MapRef, id: string = 'default') => {\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n      return {...currMaps, [id]: map};\n    });\n  }, []);\n\n  const onMapUnmount = useCallback((id: string = 'default') => {\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = {...currMaps};\n        delete nextMaps[id];\n        return nextMaps;\n      }\n      return currMaps;\n    });\n  }, []);\n\n  return (\n    <MountedMapsContext.Provider\n      value={{\n        maps,\n        onMapMount,\n        onMapUnmount\n      }}\n    >\n      {props.children}\n    </MountedMapsContext.Provider>\n  );\n};\n\nexport function useMap(): {current?: MapRef; [id: string]: MapRef | undefined} {\n  const maps = useContext(MountedMapsContext)?.maps;\n  const currentMap = useContext(MapContext);\n\n  const mapsWithCurrent = useMemo(() => {\n    return {...maps, current: currentMap?.map};\n  }, [maps, currentMap]);\n\n  return mapsWithCurrent;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}