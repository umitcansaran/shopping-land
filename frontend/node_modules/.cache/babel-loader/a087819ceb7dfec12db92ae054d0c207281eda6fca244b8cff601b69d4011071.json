{"ast":null,"code":"import { baseUrl } from \"../constants\";\nimport axios from \"axios\";\nimport { STOCK_LIST_REQUEST, STOCK_LIST_SUCCESS, STOCK_LIST_FAIL, STOCK_UPDATE_REQUEST, STOCK_UPDATE_SUCCESS, STOCK_UPDATE_FAIL, STOCK_CREATE_REQUEST, STOCK_CREATE_SUCCESS, STOCK_CREATE_FAIL, PRODUCT_STOCKS_REQUEST, PRODUCT_STOCKS_SUCCESS, PRODUCT_STOCKS_FAIL } from \"../constants/stockConstants\";\nexport const listStocks = () => async dispatch => {\n  try {\n    dispatch({\n      type: STOCK_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`${baseUrl}/api/stocks/`);\n    dispatch({\n      type: STOCK_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: STOCK_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const updateStock = (id, number) => async dispatch => {\n  try {\n    dispatch({\n      type: STOCK_UPDATE_REQUEST\n    });\n    const {\n      data\n    } = await axios.put(`${baseUrl}/api/stocks/${id}/`, number);\n    dispatch({\n      type: STOCK_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: STOCK_UPDATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const createStock = (number, store, product) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: STOCK_CREATE_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(`${baseUrl}/api/stocks/new/`, {\n      number,\n      store,\n      product\n    });\n    dispatch({\n      type: STOCK_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: STOCK_CREATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const listProductStocks = id => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_STOCKS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`${baseUrl}/api/stocks/product/${id}`);\n    dispatch({\n      type: PRODUCT_STOCKS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_STOCKS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["baseUrl","axios","STOCK_LIST_REQUEST","STOCK_LIST_SUCCESS","STOCK_LIST_FAIL","STOCK_UPDATE_REQUEST","STOCK_UPDATE_SUCCESS","STOCK_UPDATE_FAIL","STOCK_CREATE_REQUEST","STOCK_CREATE_SUCCESS","STOCK_CREATE_FAIL","PRODUCT_STOCKS_REQUEST","PRODUCT_STOCKS_SUCCESS","PRODUCT_STOCKS_FAIL","listStocks","dispatch","type","data","get","payload","error","response","detail","message","updateStock","id","number","put","createStock","store","product","getState","post","listProductStocks"],"sources":["/Users/umit/Desktop/frontend/src/store/actions/stockActions.js"],"sourcesContent":["import { baseUrl } from \"../constants\";\nimport axios from \"axios\";\nimport {\n  STOCK_LIST_REQUEST,\n  STOCK_LIST_SUCCESS,\n  STOCK_LIST_FAIL,\n  STOCK_UPDATE_REQUEST,\n  STOCK_UPDATE_SUCCESS,\n  STOCK_UPDATE_FAIL,\n  STOCK_CREATE_REQUEST,\n  STOCK_CREATE_SUCCESS,\n  STOCK_CREATE_FAIL,\n  PRODUCT_STOCKS_REQUEST,\n  PRODUCT_STOCKS_SUCCESS,\n  PRODUCT_STOCKS_FAIL,\n} from \"../constants/stockConstants\";\n\nexport const listStocks = () => async (dispatch) => {\n  try {\n    dispatch({ type: STOCK_LIST_REQUEST });\n\n    const { data } = await axios.get(`${baseUrl}/api/stocks/`);\n\n    dispatch({\n      type: STOCK_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: STOCK_LIST_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const updateStock = (id, number) => async (dispatch) => {\n  try {\n    dispatch({\n      type: STOCK_UPDATE_REQUEST,\n    });\n\n    const { data } = await axios.put(`${baseUrl}/api/stocks/${id}/`, number);\n    dispatch({\n      type: STOCK_UPDATE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: STOCK_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const createStock =\n  (number, store, product) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: STOCK_CREATE_REQUEST,\n      });\n\n      const { data } = await axios.post(`${baseUrl}/api/stocks/new/`, {\n        number,\n        store,\n        product,\n      });\n\n      dispatch({\n        type: STOCK_CREATE_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: STOCK_CREATE_FAIL,\n        payload:\n          error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n      });\n    }\n  };\n\nexport const listProductStocks = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: PRODUCT_STOCKS_REQUEST });\n\n    const { data } = await axios.get(`${baseUrl}/api/stocks/product/${id}`);\n\n    dispatch({\n      type: PRODUCT_STOCKS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_STOCKS_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}