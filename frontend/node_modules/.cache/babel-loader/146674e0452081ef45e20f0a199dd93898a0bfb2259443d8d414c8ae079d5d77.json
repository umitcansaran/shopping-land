{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\nimport { applyReactStyle } from '../utils/apply-react-style';\nimport useControl from './use-control';\nconst defaultProps = {\n  unit: 'metric',\n  maxWidth: 100\n};\nfunction ScaleControl(props) {\n  const ctrl = useControl(_ref => {\n    let {\n      mapLib\n    } = _ref;\n    return new mapLib.ScaleControl(props);\n  }, {\n    position: props.position\n  });\n  // @ts-ignore\n  if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {\n    // @ts-ignore\n    ctrl.options.maxWidth = props.maxWidth;\n    // This method will trigger an update\n    ctrl.setUnit(props.unit);\n  }\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n  return null;\n}\nScaleControl.defaultProps = defaultProps;\nexport default React.memo(ScaleControl);","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,SAAS,QAAO,OAAO;AAC/B,SAAQC,eAAe,QAAO,4BAA4B;AAC1D,OAAOC,UAAU,MAAM,eAAe;AAmBtC,MAAMC,YAAY,GAAsB;EACtCC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE;CACX;AAED,SAASC,YAAY,CAACC,KAAwB;EAC5C,MAAMC,IAAI,GAAGN,UAAU,CAAqB;IAAA,IAAC;MAACO;IAAM,CAAC;IAAA,OAAK,IAAIA,MAAM,CAACH,YAAY,CAACC,KAAK,CAAC;EAAA,GAAE;IACxFG,QAAQ,EAAEH,KAAK,CAACG;GACjB,CAAC;EAEF;EACA,IAAIF,IAAI,CAACG,OAAO,CAACP,IAAI,KAAKG,KAAK,CAACH,IAAI,IAAII,IAAI,CAACG,OAAO,CAACN,QAAQ,KAAKE,KAAK,CAACF,QAAQ,EAAE;IAChF;IACAG,IAAI,CAACG,OAAO,CAACN,QAAQ,GAAGE,KAAK,CAACF,QAAQ;IACtC;IACAG,IAAI,CAACI,OAAO,CAACL,KAAK,CAACH,IAAI,CAAC;;EAG1BJ,SAAS,CAAC,MAAK;IACb;IACAC,eAAe,CAACO,IAAI,CAACK,UAAU,EAAEN,KAAK,CAACO,KAAK,CAAC;EAC/C,CAAC,EAAE,CAACP,KAAK,CAACO,KAAK,CAAC,CAAC;EAEjB,OAAO,IAAI;AACb;AAEAR,YAAY,CAACH,YAAY,GAAGA,YAAY;AAExC,eAAeJ,KAAK,CAACgB,IAAI,CAACT,YAAY,CAAC","names":["React","useEffect","applyReactStyle","useControl","defaultProps","unit","maxWidth","ScaleControl","props","ctrl","mapLib","position","options","setUnit","_container","style","memo"],"sources":["/Users/umit/Desktop/frontend/node_modules/react-map-gl/src/components/scale-control.ts"],"sourcesContent":["import * as React from 'react';\nimport {useEffect} from 'react';\nimport {applyReactStyle} from '../utils/apply-react-style';\nimport useControl from './use-control';\n\nimport type {ControlPosition, MapboxScaleControl} from '../types';\n\nexport type ScaleControlProps = {\n  /** Unit of the distance.\n   * @default \"metric\"\n   */\n  unit?: 'imperial' | 'metric' | 'nautical';\n  /** The maximum length of the scale control in pixels.\n   * @default 100\n   */\n  maxWidth?: number;\n  /** Placement of the control relative to the map. */\n  position?: ControlPosition;\n  /** CSS style override, applied to the control's container */\n  style?: React.CSSProperties;\n};\n\nconst defaultProps: ScaleControlProps = {\n  unit: 'metric',\n  maxWidth: 100\n};\n\nfunction ScaleControl(props: ScaleControlProps): null {\n  const ctrl = useControl<MapboxScaleControl>(({mapLib}) => new mapLib.ScaleControl(props), {\n    position: props.position\n  });\n\n  // @ts-ignore\n  if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {\n    // @ts-ignore\n    ctrl.options.maxWidth = props.maxWidth;\n    // This method will trigger an update\n    ctrl.setUnit(props.unit);\n  }\n\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n\n  return null;\n}\n\nScaleControl.defaultProps = defaultProps;\n\nexport default React.memo(ScaleControl);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}