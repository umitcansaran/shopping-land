{"ast":null,"code":"const express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\nconst pool = require(\"./db\");\nrequire('dotenv').config();\n\n// Middleware\napp.use(cors());\napp.use(express.json()); //req.body\n\n// Check db connection\npool.connect((err, client, release) => {\n  if (err) {\n    return console.error('Error acquiring client', err.stack);\n  }\n  console.log('Connected to the database');\n  release(); // release the client back to the pool\n});\n\n// -------------------- HELPER FUNCTIONS\n\n// Append the S3 bucket url to the image value (relative path)\nfunction addToImagePath(arr, stringToAdd) {\n  return arr.map(obj => {\n    if (obj.hasOwnProperty('image')) {\n      obj.image = stringToAdd + obj.image; // Append the string to the image value\n    }\n\n    return obj;\n  });\n}\n\n// -------------------- ROUTES                  \n\n// GET all user profiles\napp.get(\"/api/profiles\", async (req, res) => {\n  try {\n    const allProfiles = await pool.query('SELECT * FROM base_profile');\n    res.json(allProfiles.rows);\n  } catch (err) {\n    console.error(err.message);\n  }\n});\n\n// GET all products\napp.get(\"/api/products\", async (req, res) => {\n  try {\n    const allProducts = await pool.query('SELECT * FROM base_product ORDER BY name DESC');\n    let response = allProducts.rows;\n    addToImagePath(response, process.env.AWS_S3_BUCKET_URL);\n    res.json(response);\n  } catch (err) {\n    console.error(err.message);\n  }\n});\n\n// GET last 5 sellers profiles registered\napp.get(\"/api/profiles/latest-sellers\", async (req, res) => {\n  try {\n    const latestSellers = await pool.query(\"SELECT * FROM base_profile WHERE status = 'STORE_OWNER' ORDER BY id DESC LIMIT 5\");\n    let response = latestSellers.rows;\n    addToImagePath(response, process.env.AWS_S3_BUCKET_URL);\n    res.json(response);\n  } catch (err) {\n    console.error(err.message);\n  }\n});\n\n// GET last 5 products added\napp.get(\"/api/products/latest-products\", async (req, res) => {\n  try {\n    const latestProducts = await pool.query(\"SELECT * FROM base_product ORDER BY \\\"createdAt\\\" DESC LIMIT 5\");\n    let response = latestProducts.rows;\n    addToImagePath(response, process.env.AWS_S3_BUCKET_URL);\n    res.json(response);\n  } catch (err) {\n    console.error(err.message);\n  }\n});\n\n// GET last 5 product reviews added\napp.get('/api/products/latest-reviews', async (req, res) => {\n  // Serialize \"Review\" with the product field\n  async function serializeProduct(productId) {\n    const productResult = await pool.query('SELECT * FROM base_product WHERE id = $1', [productId]);\n    return productResult.rows[0]; // Return the serialized product data\n  }\n\n  async function serializeReview(review) {\n    const product = await serializeProduct(review.product_id); // Fetch the related product\n    return {\n      ...review,\n      image: product.image,\n      // Add the serialized product image\n      product_brand: product.brand // Add the serialized product brand\n    };\n  }\n\n  try {\n    // Fetch last 5 reviews\n    const reviewResult = await pool.query('SELECT * FROM base_review ORDER BY \\\"createdAt\\\" DESC LIMIT 5');\n\n    // Serialize each review with the related product\n    let serializedReviews = await Promise.all(reviewResult.rows.map(async review => await serializeReview(review)));\n    const response = addToImagePath(serializedReviews, process.env.AWS_S3_BUCKET_URL);\n\n    // // Respond with the serialized reviews\n    res.json(response);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server error');\n  }\n});\n\n// GET seller profiles only\napp.get(\"/api/profiles/sellers\", async (req, res) => {\n  try {\n    const profiles = await pool.query('SELECT * FROM base_profile WHERE status = \"STORE_OWNER\"');\n    let response = profiles.rows;\n    addToImagePath(response, process.env.AWS_S3_BUCKET_URL);\n    res.json(response);\n  } catch (err) {\n    console.error(err.message);\n  }\n});\n\n// GET product categories\napp.get(\"/api/products/categories\", async (req, res) => {\n  async function serializeSubCategory(categoryId) {\n    const subCategoryResult = await pool.query('SELECT * FROM base_productsubcategory WHERE category_id = $1', [categoryId]);\n    return subCategoryResult.rows;\n  }\n  async function serializeCategory(category) {\n    const subcategory = await serializeSubCategory(category.id); // Fetch the related category\n    return {\n      ...category,\n      subcategory // Add the serialized subcategories\n    };\n  }\n\n  try {\n    const productCategoryResult = await pool.query(\"SELECT * FROM base_productcategory\");\n\n    // Serialize each category with the related subcategories\n    let serializedCategories = await Promise.all(productCategoryResult.rows.map(async category => await serializeCategory(category)));\n    res.json(serializedCategories);\n  } catch (err) {\n    console.error(err.message);\n  }\n});\n\n// GET product subcategories\napp.get(\"/api/products/subcategories\", async (req, res) => {\n  try {\n    const productSubCategories = await pool.query('SELECT * FROM base_productsubcategory');\n    res.json(productSubCategories.rows);\n  } catch (err) {\n    console.error(err.message);\n  }\n});\napp.listen(6000, () => {\n  console.log(\"server has started on port 6000\");\n});","map":{"version":3,"names":["express","require","app","cors","pool","config","use","json","connect","err","client","release","console","error","stack","log","addToImagePath","arr","stringToAdd","map","obj","hasOwnProperty","image","get","req","res","allProfiles","query","rows","message","allProducts","response","process","env","AWS_S3_BUCKET_URL","latestSellers","latestProducts","serializeProduct","productId","productResult","serializeReview","review","product","product_id","product_brand","brand","reviewResult","serializedReviews","Promise","all","status","send","profiles","serializeSubCategory","categoryId","subCategoryResult","serializeCategory","category","subcategory","id","productCategoryResult","serializedCategories","productSubCategories","listen"],"sources":["/Users/umit/Desktop/frontend/src/containers/Home/index.js"],"sourcesContent":["const express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\nconst pool = require(\"./db\");\nrequire('dotenv').config();\n\n// Middleware\napp.use(cors());\napp.use(express.json()); //req.body\n\n// Check db connection\npool.connect((err, client, release) => {\n  if (err) {\n    return console.error('Error acquiring client', err.stack);\n  }\n  console.log('Connected to the database');\n  release(); // release the client back to the pool\n});\n\n// -------------------- HELPER FUNCTIONS\n\n// Append the S3 bucket url to the image value (relative path)\nfunction addToImagePath(arr, stringToAdd) {\n  return arr.map(obj => {\n    if (obj.hasOwnProperty('image')) {\n      obj.image = stringToAdd + obj.image; // Append the string to the image value\n    }\n    return obj;\n  });\n} \n\n// -------------------- ROUTES                  \n\n// GET all user profiles\napp.get(\"/api/profiles\", async (req, res) => {\n    try {\n        const allProfiles = await pool.query('SELECT * FROM base_profile');\n        res.json(allProfiles.rows);\n  } catch (err) {\n        console.error(err.message);\n  }\n});\n\n// GET all products\napp.get(\"/api/products\", async (req, res) => {\n  try {\n      const allProducts = await pool.query('SELECT * FROM base_product ORDER BY name DESC');\n      let response = allProducts.rows\n\n      addToImagePath(response, process.env.AWS_S3_BUCKET_URL);\n      res.json(response);\n} catch (err) {\n      console.error(err.message);\n}\n});\n\n// GET last 5 sellers profiles registered\napp.get(\"/api/profiles/latest-sellers\", async (req, res) => {\n  try {\n      const latestSellers = await pool.query(\"SELECT * FROM base_profile WHERE status = 'STORE_OWNER' ORDER BY id DESC LIMIT 5\");\n      let response = latestSellers.rows\n\n      addToImagePath(response, process.env.AWS_S3_BUCKET_URL);\n      res.json(response);\n} catch (err) {\n      console.error(err.message);\n}\n});\n\n// GET last 5 products added\napp.get(\"/api/products/latest-products\", async (req, res) => {\n  try {\n      const latestProducts = await pool.query(\"SELECT * FROM base_product ORDER BY \\\"createdAt\\\" DESC LIMIT 5\"); \n      let response = latestProducts.rows\n\n      addToImagePath(response, process.env.AWS_S3_BUCKET_URL);\n      res.json(response);\n} catch (err) {\n      console.error(err.message);\n}\n});\n\n// GET last 5 product reviews added\napp.get('/api/products/latest-reviews', async (req, res) => {\n\n  // Serialize \"Review\" with the product field\n  async function serializeProduct(productId) {\n    const productResult = await pool.query('SELECT * FROM base_product WHERE id = $1', [productId]);\n    return productResult.rows[0]; // Return the serialized product data\n  }\n\n  async function serializeReview(review) {\n    const product = await serializeProduct(review.product_id); // Fetch the related product\n    return {\n        ...review,\n        image: product.image, // Add the serialized product image\n        product_brand: product.brand, // Add the serialized product brand\n    };\n  }\n  try {\n      // Fetch last 5 reviews\n      const reviewResult = await pool.query('SELECT * FROM base_review ORDER BY \\\"createdAt\\\" DESC LIMIT 5');\n\n      // Serialize each review with the related product\n      let serializedReviews = await Promise.all(\n          reviewResult.rows.map(async (review) => await serializeReview(review))\n      );\n\n      const response = addToImagePath(serializedReviews, process.env.AWS_S3_BUCKET_URL);\n\n      // // Respond with the serialized reviews\n      res.json(response); \n  } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server error');\n  }\n});\n\n// GET seller profiles only\napp.get(\"/api/profiles/sellers\", async (req, res) => {\n  try {\n      const profiles = await pool.query('SELECT * FROM base_profile WHERE status = \"STORE_OWNER\"');\n      let response = profiles.rows\n\n      addToImagePath(response, process.env.AWS_S3_BUCKET_URL);\n      res.json(response);\n} catch (err) {\n      console.error(err.message);\n}\n});\n\n// GET product categories\napp.get(\"/api/products/categories\", async (req, res) => {\n  async function serializeSubCategory(categoryId) {\n    const subCategoryResult = await pool.query('SELECT * FROM base_productsubcategory WHERE category_id = $1', [categoryId]);\n    return subCategoryResult.rows; \n  }\n\n  async function serializeCategory(category) {\n    const subcategory = await serializeSubCategory(category.id); // Fetch the related category\n    return {\n        ...category,\n        subcategory, // Add the serialized subcategories\n    };\n  }\n  try {\n      const productCategoryResult = await pool.query(\"SELECT * FROM base_productcategory\");\n\n      // Serialize each category with the related subcategories\n      let serializedCategories = await Promise.all(\n        productCategoryResult.rows.map(async (category) => await serializeCategory(category))\n      );\n\n      res.json(serializedCategories);\n} catch (err) {\n      console.error(err.message);\n}\n});\n\n// GET product subcategories\napp.get(\"/api/products/subcategories\", async (req, res) => {\n  try {\n      const productSubCategories = await pool.query('SELECT * FROM base_productsubcategory');\n      res.json(productSubCategories.rows);\n} catch (err) {\n      console.error(err.message);\n}\n});\n\napp.listen(6000, () => {\n  console.log(\"server has started on port 6000\");\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}