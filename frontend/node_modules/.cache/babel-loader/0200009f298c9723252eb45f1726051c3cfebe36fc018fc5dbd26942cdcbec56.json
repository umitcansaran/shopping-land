{"ast":null,"code":"function infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n        const queryFn = context.options.queryFn || (() => Promise.reject(\"Missing queryFn for queryKey '\" + context.options.queryHash + \"'\"));\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nfunction getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n  return;\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n  return;\n}\nexport { getNextPageParam, getPreviousPageParam, hasNextPage, hasPreviousPage, infiniteQueryBehavior };","map":{"version":3,"mappings":"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","names":["infiniteQueryBehavior","onFetch","context","fetchFn","refetchPage","fetchOptions","_context$fetchOptions","meta","fetchMore","_context$fetchOptions3","pageParam","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","state","data","pages","oldPageParams","pageParams","newPageParams","cancelled","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","aborted","addEventListener","queryFn","options","Promise","reject","queryHash","buildNewPages","param","page","previous","fetchPage","manual","length","resolve","queryFnContext","queryKey","queryFnResult","promise","then","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","i","shouldFetchNextPage","finalPromise","hasNextPage","Array","isArray","nextPageParam","hasPreviousPage","previousPageParam"],"sources":["/Users/umit/Desktop/frontend/node_modules/@tanstack/query-core/src/infiniteQueryBehavior.ts"],"sourcesContent":["import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData,\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: (context) => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal?.aborted) {\n                cancelled = true\n              } else {\n                context.signal?.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn ||\n          (() =>\n            Promise.reject(\n              `Missing queryFn for queryKey '${context.options.queryHash}'`,\n            ))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean,\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean,\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then((page) =>\n            buildNewPages(pages, param, page, previous),\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then((pages) => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i]),\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then((pages) => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n  return\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n  return\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}